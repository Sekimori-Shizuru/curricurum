■IT
・IT(Information Technology)
　情報技術　技術そのもの

・ICT(Information and Communication Technology)
　情報通信技術　技術の使い方
　「コミュニケーション」

・Iot(Internet of things)
　モノのインターネット化
　例：スマート家電の遠隔操作

■OS
・OS(Operation System)
　基本ソフトウェア（↔応用ソフトウェア）とも。
　ハードウェアとユーザー、ハードウェアと応用ソフトウェアとの中継を担う。

・Windows
　マイクロソフト社が開発したOS。
　窓を開きながら操作することが由来。

・macOS(Mac OS X)
　アップル社が開発したOS。
　UNIXがベースになっている。
　OS XからiOS watchOSなど現行のOSと足並みをそろえるために改名されたと考えられている。

・UNIX
　最古のOSの一つ
　色々なOSの土台に。
　黒画面で操作する
　例：カーナビ、携帯電話

・Linux
　UNIXを参考に独自開発されたOS。
　黒画面で操作する。
　AndroidはLinuxがベース。

■言語・環境
□マークアップ/フロントエンド
・HTML(Hyper Text Markup Language)
　Webページを作成するための言語
　マークアップ…文章の構成、役割を示す
　多くのWebページの文字がHTMLで作られている

・CSS
　HTMLコンテンツに適用するスタイリング規則の言語
　Webページの文字の色や大きさ、背景、配置といったスタイル（見た目）を設定する言語
　多くのWebページはHTMLとCSSがセットで作られている。

・javaScript
　Webページにおいて複雑な機能をできるようにするプログラミング言語。
　動的なコンテンツ更新マルチメディア管理など、様々なことができる。
　処理はユーザーのブラウザで行われる
　API(Application Programming Interface)という構築済みの機能があり、高度な機能を簡単に行うことができる。
　
　・jQuery
　　JavaScriptのためのライブラリ。
　　使用することでシンプルな記述で効率的に動的な表現を実装できる。
　　コード量の短縮と、どのブラウザでも使えるというメリットがある一方で、
　　ライブラリの読み込みが必要なため、処理が遅くなる場合や、他のフレームワークと処理が競合する可能性もあり、導入に注意が必要な場面もある。

・Java SE(Java Platform, Standard Edition)
　Javaで使用される基本的なAPIをまとめたもの。
　デスクトップアプリケーションを作るときに使用する？　
　大規模開発の場合…合わせてEE(Enterprise Edition)を合わせて使用。
　家電など組み込み機器やモバイルデバイスでのアプリ開発の場合はME(Micro Edition)が使われる。

□サーバーサイド
・.NET(C# , VB) (Microsoft .NET Framework)
　アプリケーション、または開発環境のこと。
　WindowsのシステムやWebサービスなどの開発に利用される。
　業務効率化や自動化のシステム開発に利用されることが多い。（例：勤怠、在庫管理など）
　複数のプログラミング言語が扱えるため、別言語によって設計された機器やソフトウェアとの連携がしやすい。
　VB.NET
　Visual Basicというプログラミング言語
　文法がシンプルなので、簡単なプログラムを組みたいときに重宝する。C#to似た文法を使っている。
　C#
　マイクロソフトによって開発されたプログラミング言語。.NET Framework上で使うことを想定された言語

・JAVA
　JDK(java Development Kit)
　　コンパイラー、デバッガーや、プログラムとして実行するためのものをひとまとめにしてある。
　JRE（Java Runtime Environment)
　　プログラムを実行するための仮想マシン

　・Java SE
　　Javaの実行環境の基本？
　　まずこれを用意すれば開発環境は用意できる。
　　Eclipseが開発用ツールとして広く利用されている。

　・Java EE(Jakarta EE)
　　サーバーサイドにおけるJavaの実行環境がこれ。
　　「アプリケーションサーバー」
　　NetBeansが一般的に利用されている。(JavaEEが同梱されている。)

・Perl
　プログラミング言語→スクリプト言語
　書いて動かすまでが簡単
　今はお株をPHPに奪われている。

・PHP
　スクリプト言語
　習得がしやすい
　動的なWebページの作成が得意（例：掲示板）
　HTMLのファイルの中に埋め込める
　Webサーバー側で処理が行われる
　→サーバー側にあるMySQLなどのデータベースと連携できる。

・Ruby
　スクリプト言語
　書きやすく読みやすい
　Perlなどが参考にされている（名前の宝石繋がりはそこから）
　得意：ショッピングサイト、ブログサイト、アプリケーションサイトなど、
　　　　フレームワークを使ったWebサイト構築
　使用例：クックパッド、食べログ
　割と自己流で記述しても動く→読解に困ることも

■サーバーソフト
・Apache(Apache HTTP Server)
　Webサーバーソフト(Webページを表示させるためのデータ保管場所)
　オープンソースで無料使用できる
　OSを選ばず動く　汎用性高い
　処理速度が速い　PHPやデータベースとの連携もしやすい
　機能が豊富　モジュールの多さ→初心者も安心
　同時処理数が多いと重くなる→多人数が同時使用するサイトには向かない
　オープンソースだからサポートや保証がない

・nginx
　WebサーバーソフトウェアS
　オープンソース
　並行処理能力高め（特化してる）
　メモリ使用量が抑えられる
　同時接続処理に強い
　動画コンテンツの処理は不向き
　機能追加しづらい
　初心者向けの設定情報は少ない

・IIS(Internet Information Services)
　Microsoftが提供するWindowsのWebサーバーソフト
　無料使用可能
　Windows用なので視覚的に高度な操作が可能
　使いやすく、日本語のマニュアルが充実している
　拡張機能が多く、開発環境がそろっている
　ASP.NETという言語？

■SQL
□SQL
　データベースを操作する際に使用する言語(構造化クエリ言語）
　（データベース管理システム（DBMS）にSQLの指示を送って、データベースを操作してもらう。）

　・DB2
　　IBM社のリレーショナルデータベース管理システム(RDBMS)および関連ソフトウェアのブランド名
　　幅広いプラットフォームに対応
　　機能追加についての関連ソフトウェアは多くリリースされており、Db2ファミリーなどと呼ばれることも

　　　RDBMS：表形式でデータを管理する

　・MySQL
　　Oracle社が開発、サポートしているオープンソースのRDBMS（無償版にはサポートなし）
　　クライアントサーバーモデル
　　シンプルな操作向け
　　使用例：Twitter, NETFRIX. Wikipedia
　
　　・Maria DB
　　　MySQLをベースに作られたRDBMS　似ている
　　　MySQLとの互換性を強調

　・OracleDB
　　Oracle社製データベース
　　商用で世界初のRDBMS
　　幅広いプラットフォームに対応　移植性が高い
　　世界最大規模　大量のデータを扱う場合におすすめ
　　高い堅牢性
　　多言語対応、
　
　・PostgreSQL
　　オープンソース
　　ライセンスが無料で使える
　　日本語対応
　　公式なサポートはない
　　ORDBMS(O＝オブジェクト）
　　→オブジェクト指向の言語で操れる
　　複雑・大量なデータの操作、管理が得意
　　テーブル、カラム
　　ほかにインデックス型、関数の定義ができる。

　・SQLite
　　オープンソース
　　計量、コンパクトなRDBMS
　　アプリケーションに組み込んで利用する
　　簡易的に扱える
　　自己完結型システム（ライブラリとして使える？）　　　
　　マルチプラットフォーム　スマホでも使える
　　データ型指定を強制しない
　　　
　・SQL Server(MIcrosoft SQL Server)　　　Microsoft社が開発したRDBMS
　　Windowsとの互換性が高い→直観的な操作ができる
　　Transact-SQLという拡張機能が使える　SQLから応用してより高度な操作が行える
　　エディションが豊富

・CRUD
　DBMSなどについて用いられる語
　Create　データの作成　SQLではINSERT
　Read　読み出し　SQLではSELECT
　Update　更新　SQLではUPDATE
　Delete　削除　SQLではDELETE
　システム、ソフトウェア設計では適切なデータ集合に対して適切なCRUD操作を行う必要がある。

・トランザクション
　コンピュータシステムにおける、永続的なデータに対する不可分な一連の処理
　→一つの処理単位
　全部成功 or 全部失敗（丸ごと処理が取り消される）
　ACID特性　トランザクションを管理するシステムが持つべき性質
　　Atomicity（原子性）：処理のすべてが成功か失敗かの二択
　　Consistency（整合性）：実行前後でデータの整合性が保たれる
　　Isolation（独立性）：トランザクションの実行が外部に影響しない
　　Durability（永続性）：完了時に結果が恒久的に記録され、失われない

　・コミット
　　トランザクションが成功すること、つまり整合性を保って資源を更新すること
　・ロールバック
　　トランザクションが失敗すること、トランザクションで更新するはずの資源の状態を、トランザクション開始前の状態に戻すこと

・排他制御（排他ロック）
　共有資源（データやファイル）に対して複数のアクセスが見込まれる場合に、同時アクセスにより不整合が発生することを防ぐため、あるトランザクションが共有資源（データやファイル）にアクセスしている時は他トランザクションからはアクセスできないようにして直列に処理されるように制御すること
　同時に使われたら困るもののダブルブッキングを防ぐ処理のこと

　・楽観ロック
　　他者との同時更新はそうそう起きないだろうという「楽観的な」前提の排他制御
　　データそのものに対してロックは行わずに、更新対象のデータがデータ取得時と同じ状態であることを確認してから更新することで、データの整合性を保証する方式

　・悲観ロック
　　他者が同じデータに頻繁に変更を加えるだろうという「悲観的な」前提の排他制御
　　更新対象のデータを取得する際にロックをかけることで、他のトランザクションから更新されないようにする方式

・実行計画
　SQLの実行の手順書のようなもの
　データベースが判断したパフォーマンスの高いSQLの実行方法が確認できる。

・チューニング
　実行計画を確認したうえで、自身にとっての最適な実行パフォーマンスに調整すること。

・パフォーマンス
　SQLの処理速度やコストの低さなど

・スロークエリ
　実行が遅いクエリ　（目安2秒？）
　改善すべき問題　結果を変えないままクエリ自体を変更する、インデックスをテーブルに貼るなどの改善策がある。
　　　
・クエリログ
　クライアントからの MySQL Server への接続・接続解除の情報、およびクライアントから実行された全ての SQL クエリを出力してくれるログ
　SQL 実行エラーが発生した際に、どのような SQL が実行されたのかを正確に把握するのに役に立つ

・IDE（統合開発環境）(Integrated Development Environment)
　ソフトウェア開発に必要なソフトウェアをひとまとめにし、同じ操作画面から統一的な操作法で利用できるようにしたソフトウェアパッケージ
 一般的にはコードエディタやコンパイラ、リンカ、デバッガ、テストツール、バージョン管理ソフトなどで構成される。
　
　・Eclipse
　　オープンソフトウェア
　　標準でJavaの開発環境が含まれていて、プラグインを導入することでさまざまな言語が使える
　・NetBeans
　　オープンソースソフトウェア
　　Javaアプリ開発の統合環境として開発が始められたが、現在ではJavaのみならずJavaScriptやPHP、CおよびC++など、多くのプログラミング言語をサポートしている
　　Java EEなどJavaによるWebサービス開発のための環境も用意されている
　・SpringToolSuite
　　Springの標準開発環境。Eclipseベース
　　Eclipseのプラグインとしても提供されている。

・DBツール
　データを効率的に整理し保存、管理するためのソフトウェア
　大容量のデータが保存可能、操作も容易
　安全性

　・A5:SQL Mk-2
　　複雑化するデータベース開発を支援するために開発されたSQL開発ツール
　　高機能、軽量、使い方が分かりやすいことを目標に開発されている
　　ER図の作成が可能
　　
　・pgAdmin
　　PostgreSQLの管理ツールの一つで、ネットワークを通じて遠隔のデータベースサーバをグラフィカルな表示・操作体系（GUI）で管理することができるもの。
　　オープンソース
　　4からはWebアプリケーション化されたため、Chromeなど主要なWebブラウザが動作する環境ならばOSは不問

　・DBeaver
　　マルチプラットフォーム対応の無料データベース管理ツール
　　Eclipseプラットフォームがベース

　・MySQL Workbench
　　MySQL専用のデータベース管理ツール
　　ER図作成も可能
　　GUI環境で作業ができる
　　

　・Sequel Pro
　　Mac用のMySQLのデータをGUI操作で管理するためのアプリケーション
　　フリーソフトウェア
　　SSL Tunnelが使える
　　
　・TeamSQL
　　無料のデータベース管理ツール
　　データベースの種類関係なく横断的に使える
　　SQLクライアント（GUIツール）

■肩書
・PM（プロジェクトマネージャー）
　開発プロジェクトの取りまとめを行う役割（全体の指揮）
　企業内でのプロジェクトを総合的に任され、計画と実行の責任を担う役職
　プロジェクト全体の進捗状況、人員管理、予算、納期、品質管理、リスクまで把握し、チームをまとめ上げる能力が求められる
・PL（プロジェクトリーダー）
　中～大規模プロジェクトで、PMが全体に目を配れなくなると配置される
　現場での指揮系統を統括する（より細かい部分の指示）
　チームメンバーに指示を出す、意見をまとめるなど、
　自身も現場で実務にあたりながら、チームを監督していくという業務

・PG（PE）（プログラマー）（プロフェッショナルエンジニア？）
　SEが用意した仕様書をもとにプログラミング・単体テストをする

・SE（システムエンジニア）
　開発メンバーの一員として、担当作業が割り振られる
　担当のお客様と打ち合わせしていく中で、要件の確定や仕様の検討など、主に上流工程の仕事をしていきます
　SEがPGを兼任することも
　
・デザイナー
　「デザイン」を手掛ける仕事
　ビジュアルデザインだけではない
　新規プロダクトに価値を持たせるための構造化
　既存プロダクトの改善活動
　→目的達成に向けたプロダクトの設計

・エンジニア
　システムなど、目に見えない部分を開発する仕事
　顧客の意見を吸い上げて開発を行うなど、技術的な仕事以外の仕事もある

　・フロントエンド・エンジニア
　　直接ユーザーの目に触れる部分を開発する仕事（UI、検索画面など）
　　HTML、CSS、JavaScript、TypeScriptなどが使われる

　・サーバーエンド・エンジニア
　　サーバーの設計や管理など、サーバー関連の業務を行うエンジニア
　　プログラム開発、データ管理、サーバーの保守や修正など
　　サーバーに関してフロントエンド、バックエンド両方を担う

　・バックエンド・エンジニア
　　ユーザーの目に触れない部分を開発する仕事（Webのサーバーやデータベースの構築）
　　Java、JavaScript、PHP、Python、Rubyなどが使われる

■UI（ユーザーインターフェース）
・UI
　ユーザーと製品、サービスとの接点すべてのこと
　例：Webページのユーザーが触れる画面、ボタンの操作性、レイアウトなどすべて）

　・CUI(Character-based User Interface)
　　全てのやり取りを文字によって行う方式のUI
　　人間の入力文字列とコンピュータの出力文字列が交互に並ぶ対話式の操作環境が一般的

　・GUI(Graphical User Interface)
　　情報の提示に画像や図形を多用し、基礎的な操作の大半をマウスやタッチスクリーンなどによる画面上の位置の指示により行うことができる方式のUI
　　例：Windows
　　　　デスクトップやホーム画面のアイコンを選択すると画面が遷移し、選択したものが使用できる

■ファイル/ディレクトリ
・ファイル
　コンピュータにおけるデータの管理単位の一つ
　記憶媒体にデータを記録する際に利用者やOSから見て最小の記録単位となるデータのまとまり
　データの送受信単位としても利用される

・拡張子
　ファイルの種類を識別するための文字列
　ファイル名の末尾に「.」を挟んで入力される
　それぞれに対応したアプリケーションで開ける
　
・ディレクトリ
　ファイルを補完するための場所
　階層構造を持つ
　WindowsやMacでは「フォルダ」と呼ばれる

　・ルート・ディレクトリ
　　装置、システムの階層構造の中で最上位に存在するディレクトリ
　　
　・カレント・ディレクトリ
　　実行中のソフトウェアなどがストレージのファイルシステム中で現在位置として指し示しているディレクトリのこと
　　例：Java研修の時のカレントディレクトリはLetsEngeneer
　　別名：現行ディレクトリ / 作業フォルダ / ワーキングディレクトリ

・パス
　コンピュータ内で特定の資源の所在を表す文字列のこと
　最上位から順にディレクトリ名を並べて記したもの

　・絶対パス
　　ルートディレクトリからの位置を記述する記法
　　住所を教える

　・相対パス
　　カレントディレクトリを起点に、相対的な位置を記述する記法
　　現在位置を「.」、一つ上の階層の親ディレクトリを「..」という特殊な表記で表し、「./hoge.txt」（カレントディレクトリにあるhoge.txt）や
　　「../../hoge.txt」（2階層上のディレクトリのhoge.txt）のように書き表す
　　行き方を教える

■ネットワーク
・LAN(Local Area Network)
　一定の限定されたエリアで接続できるネットワーク
　例：Wi-Fi（無線LAN) 
　
・WAN(Wide Area Network)
　遠く離れたエリアとつながったネットワークのこと
　例：インターネット（LANとLANを繋いだ広域なネットワーク）

・クライアント
　サーバーからサービスを受ける、依頼する側のコンピューター端末

・サーバー
　クライアントにサービスを提供する、依頼を受ける側のWebシステム、それを持つコンピューター端末

■ 各種プロトコル
・HTTP(Hyper Text Transfer Protocol)
　ホームページを表示するための世界共通のルール
　Webサーバとクライアント（ブラウザ）が、 HTMLで書かれた文書などの情報をやりとりする時に使われる通信手順(プロトコル)のこと
　原則、ステートレス、つまり1回コマンドを送ったら1回結果が返ってきてそれで終わり
　プログラムは簡単だけ素複数回のやり取りは追えない
　データが暗号化されていない

・FTP(File Transfer Protocol)
　2台のコンピュータ間でファイルを転送するためのプロトコル
　制御コネクションとデータコネクションの2つのTCPセッションを使う
　→大量のデータを送受信している最中でも、確実にFTPコマンドをやりとりすることが出来る
　制御コネクション：FTPコマンドやリプライ
　データコネクション：実際のデータ転送
・HTTPS(S = Secure)
　暗号化を行ったうえでサーバーとブラウザでデータのやり取りをするプロトコル
　HTTPより安全性が高い
・SSL(Secure Socket Layer)
　インターネット上でデータを暗号化して送受信する仕組みのひとつ
　クレジットカード番号などの個人情報をやり取りするWebサイトで広く使われる
　HTTPSのアドレスのサイトで使われている
　SSLの脆弱性が発見された現在は、TLS（Transport Layer Security）という規格が使われているが、
　SSLという名称は暗号化通信規格の一般名称として定着しているため、便宜上「SSL」という名称が使われることがある。

・SSH(Security Shell)
　遠隔でコンピューター機器（主にサーバー）を操作する際に通信データを暗号化するプロトコル

・ポート、ポート番号
　機器やソフトウェアが外部の別の主体と接続・通信するための末端部分のこと
　TCP/IP通信において、コンピュータが通信に使用するプログラムを識別するために振り分けられた番号
　16ビットの整数　0番～65535番
　
・HTTP、FTP、SSHの各ポート番号
　HTTP　80番
　FTP　20, 21番(データ、制御）
　SSH　22番

・ファイアウォール
　ネットワークの通信において、その通信をさせるかどうかを判断し許可するまたは拒否する仕組み
　通信の送信元と宛先を見ている　内容は見ていない
　パーソナルファイアウォール：家庭利用など、単体でのコンピュータを防御する
　ファイアウォール：ネットワーク全体を防御する　インターネットと社内LANとの間に設定する

・TCP(Transmission Control Protocol)
　通信プロトコルの一つ
　コネクション型のプロトコルで、「スリーウェイハンドシェイク」と呼ばれる3段階から成る制御情報のやり取りを行い、
　通信相手の状況を確認して仮想的な伝送路（TCPコネクション）を確立する
　信頼性が高い一方で、転送速度が低いという特徴がある
　
■IPアドレス
・IPアドレス
　機械のための情報
　ネットワーク上の機器に割り当てられるインターネット上の住所のようなもの
　ネットワーク上でデータを送受信する際、通信相手を指定するために使われている
　
　・グローバルIPアドレス
　　世界に一つだけで、全世界に通用するようアドレス
　　ICAANという特定の国や地域に属さない組織によって割り振られる
　　0～255の数字4組から成る　アドレスの枯渇問題が起きている

　・プライベートIPアドレス
　　自宅や会社など特定のネットワークの範囲内で用いられるIPアドレスのこと
　　ローカルIPアドレスとも呼ばれる
　　
　例：家族共用のWi-Fiを使う場合、インターネットからルーターのグローバルIPアドレスが指定され、
　　ルーターから各機器にプライベートIPアドレスが指定されて通信がされる

■ドメイン
・ドメイン
　人間のための情報
　Webサイトがどこにあるかを判別する情報
　インターネット上の住所のようなもの
　Webサイトは//の後
　メールアドレスは@の後

・DNS(Domain Name System)
　ドメイン名とIPアドレスを対応づける仕組み
　「インターネットの住所録」
　世界中のサーバーが協調しあって動作するデータベース
　
・VPN(Virtual Private Network)
　仮想専用線
　送受信側それぞれに設置した機器でカプセル化を行うことで、
　第三者に見えない仮想的なトンネルを形成して通信する仕組み
　正規利用者である認証を行う、通信を暗号化して行うなどの技術を併用し、安全性の高い通信が可能

・ブリッジ
　ネットワークの中継機器
　ネットワーク中のデータ（MACアドレス）を見て行き先を振り分ける
　MACアドレス：ネットワーク機器に割り当てられた住所　中継を担う
　
・プロキシサーバー
　クライアントとサーバーの中継をするサーバー
　自分の情報の匿名性が高まる
　処理が速くなる場合がある（キャッシュがある場合）
　キャッシュ：アクセスしたサイトの情報
■電子メール
・SMTP（Simple Mail Transfer Protocol）
　メール送信についての通信プロトコル
　セキュリティに問題あり
　メールを移動するときに使うサーバー：SMTPサーバー
　
・POP(Post Office Protocol)
　メール受信についての通信プロトコル
　届いたメールをPOPサーバーから各端末に渡す
　端末にデータを渡すので、オフラインでも受信メールの整理が行える

・IMAP(Internet Message Access Protocol)
　メールサーバーにアクセスし、サーバー上でメールを読む通信プロトコル
　メールデータはパソコンにダウンロードや保存をしない
　複数端末でのメールデータを自動で同期してくれる
　端末が壊れてもメールの確認が可能
　端末自体の容量を気にしなくてすむ
　セキュリティ面がPOPよりも良い

■セッションとクッキー
・セッション
　インターネット通信の開始から終了まで
　接続～切断まで

・クッキー
　SNSなどのユーザー情報を保存しておく機能のこと
　例：2度目以降のログインが楽なSNS
　　　「ログイン情報を保存しますか？」
　
・キャッシュ(Cache)
　アクセスしたWebサイトの基本情報を保存しておく機能のこと

■DB(データベース)について
・インデックス（索引）
　データベースの性能を向上させる方法
　探すレコードを識別するデータの項目」「対象レコードの格納位置を示すポインタ」で構成される
　→これを利用してデータの格納位置を特定、直接アクセスすることで、表の検索精度を上げる
　検索対象の表の更新速度が下がることも

■テストについて
・フロー（flow)
　流れ
　仕事などの流れ
　
■チケット管理ツール
・タスク
　そのプロジェクト内でこなすべき仕事
　チケット管理ではそれをチケットとして発行、管理される
　
■バージョン管理
・Git
　分散型バージョン管理システム
　→リモートリポジトリからローカルに丸ごと複製して作業する
　　更新したファイルをプッシュして初めて更新内容を他者と共有する
　　楽観ロック
　CUIツール
　ファイルのバージョン管理のためのツール
　できること：
　　古いバージョンへの巻き戻し
　　新旧ファイルの一元管理
　　編集履歴の共有
　　複数人での修正の統合

・SVN（Apache Subversion）
　集中型バージョン管理ツール
　→リモートリポジトリに対して、開発者全員が直接作業を行う
　　悲観ロック
　
・デグレ(degrade/低下する、下がる）
　不具合を修正した場合などにそれまで動作したものが動かなくなってしまうというように、品質が低下してしまうトラブルのこと

・マージツール
　マージ：ITの分野では、複数のファイルやデータ、プログラムなどを、決められたルールに従って一つに統合することをマージということが多い
　　　　　データ列などをマージするという場合には、対象全体を単純に後ろに繋いでいくのではなく、データ構造の一貫性などを保ちながら要素を取り出して融合していく操作を指すことが多い
　　　　　バージョン管理されているファイル群に対して行われた変更を統合する操作のこと
　ファイルの競合が起こったときに解決するためのツール？
　