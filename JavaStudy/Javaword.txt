■開発
・ウォーターフォール開発
　システム開発手法の一種（予測型）
　上流工程から下流に沿って開発を進める（滝のように下っていく）
　基本的に前工程を完全に終えてから次の工程に進む
　→工程のスキップはない
　→隣り合う工程の反復はある
　利点：不測の事態が起こらない秩序だった製造サイクル
　　　　納期、予算がわかりやすい
　　　　バグの発生が少ない
　要件定義、仕様→外部設計→内部設計→開発・システム実装→テスト→運用

・アジャイル開発
　システム開発手法の一種（適応型）
　開発工程を機能単位の小さなサイクルで繰り返す
　優先度の高い要件から取り組み、それらの集合体として1つのシステムを形成する
　プロダクトの価値を最大化することに重点を置く
　利点：仕様変更に強い（顧客の意見を吸い上げられる）、サービスインまでの時間を短縮できる

・マイグレーション（移住、移転、移動）
　移行作業
　既存システムやソフトウェア、データなどを別の環境に移転したり、新しい環境に移行すること
　例：オンプレミス環境からクラウドサービスへ
　≒コンバージョン（変換、転換、転化）：システムを異なる設計のものに入れ替える手法のこと
　→マイグレーションはシステムの中身を変えない

・デグレーション（悪化、退化を名詞形で呼びたかった？）
　プログラムの不具合修正などをした際に、他に新たな不具合が出てくること
　品質や機能がより悪くなること
　リグレッションテスト：デグレーションを検証するテスト

・デプロイ（常駐する・配置する）
　実行ファイルを実際のWebサーバー上に配置して、利用できる状態にすること
　開発・テスト・本番環境の中で、テスト・本番環境を利用する
　システムが動く実際の環境（またはそれを再現した環境）で実際に稼働できる状態にする

・コンフリクト（競合）
　複数の装置、プログラムが同じ資源を同時に利用しようとして競合状態になってしまうこと
　プログラミング…複数のライブラリなどが同じ名前空間やクラス・変数名を定義していて両者を同時に利用できない状態になること
　DB・ファイル・バージョン管理システムなど…同じ対象や領域に同時に複数の更新要求が発生し、内容が損なわれたり要求が拒絶されるなど、正常な処理ができない状態のこと

・環境
　ソフトウェアや装置が動く場所がどうなっているか
　ある装置やソフトウェアにとって、それが実際に動くハードウェア、ソフトウェアの構成や設定、などの組み合わせのこと
　・コンピュータ
　・ソフト
　・回線
　・その他の機材
　・必要な設定
　などのひとまとまり
　

　・開発環境（ローカル）
　　個人のコンピューター内に構築された環境
　　ITにおけるローカル：ネットワーク上でない特定の狭い範囲↔リモート、グローバル

　・検証環境（ステージング）
　　開発環境で作られたシステムをテストするための環境
　　検証環境と開発環境を分けると開発をしながらテストができる
　　ステージング環境：本番に限りなく近い検証環境の最終段階のこと

　・本番環境
　　実際にシステムが稼働している環境
　　ユーザーがシステムを使う
　　検証、ステージングを経て、本番環境にデプロイする

・設計書／仕様書
　開発の際に、備えるべき機能やその性能、特性、満たすべき要件などを図表や文章などで記述した文書
　意図:明確に何を作るべきかを示し、関係者間で共有する
　仕様書：「何を作るか」を記す（結果）
　設計書：「どのように作るか」も書かれている（過程を含む）

　・要件定義
　　顧客の求めることをまとめる作業
　　プロジェクトを始める前の段階で、必要な機能や要求をわかりやすくまとめていく作業のこと
　　ゴールは顧客の求めるものを作ること、ゴールを明確にするために行う
　　

　・基本設計書
　　鳥の目
　　基本設計＝外部設計
　　必要な要件などを確認しつつ、システムの全体像を構築していくための設計書
　　顧客に仕様を伝え、問題ないか確認してもらうために作られる
　　顧客の目にも触れるため、開発者以外にも読みやすいことが大事

　・詳細設計書
　　蟻の目、細部
　　詳細設計＝内部設計
　　基本設計において固めていたシステムの全容を、具体的な機能に落とし込んで設計するための設計書
　　プログラマーにどのようなシステムを開発すべきか伝え、問題なく開発作業を行ってもらうために作られる

・テスト
　開発しているシステムが仕様通りに動作するかを判断するために行う
　
　・単体テスト（UT）(Unit Test)
　　序盤　1つの関数、モジュールが正常に動作するかのテスト
　　バグの発見が簡単→この段階で多くのバグを見つけ、潰す必要がある。
　　「スタブ」「ドライバ」と呼ばれる一時的な処理プログラムを書くことがある

　・結合テスト（CT／IT）(Combined Test/Integration Test)
　　中盤　複数の関数、モジュールを組み合わせて正常に動作するかのテスト
　　データの受け渡しやそのタイミング、狙った結果が返ってくるかなどを確認する

　・総合テスト（ST）(System Test)
　　終盤　実際の運用形態に沿って正常に動作するかのテスト
　　本番同様のデータ量やアクセス数で負荷をかけて試験したり、一定期間運用して問題ないかなどを見る
　　開発側最後のテスト
　　
・エビデンス／証跡
　プログラムやシステムの試験の結果や、動作検証を確認したことの記録
　バグなどが発生したときにも記録する
　顧客にシステム試験の成果物として提示されることもある
　わかりやすく事実を連ねる

・データパッチ（パッチ＝あて布）
　後付けのプログラム
　、ソフトウェアを構成するプログラムやデータを更新・修正するために、新しい版との相違点（差分）を抜き出したデータのこと
　ソフトのバグを直す、新機能を追加するときに使う
　ファイルの形にまとめられていることが多い　「パッチファイル」

・Access
　マイクロソフト社が開発、提供しているRDBMS
　Excelよりデータ量が大きい（Excelは表計算ソフト）
　列ごとに方の指定を行う→入力ミスを防げる
　大量のデータをより厳密に扱いたいときに使う
　
・マクロ
　記録された複数の操作をまとめて呼び出す操作
　Excelの自動化で使われることが多い

　・VBA
　　マクロを作っているプログラミング言語
　　Excelが有名、AccessにもWordにもPowerPointにもある

・GAS（Google Apps Script）
　Googleが提供するサービスと連携して利用するためのプログラミング言語
　Googleサーバーに実行環境があるため、自分のPCやブラウザが起動していなくても、設定した動作をさせられる
　Twitter、lineとも連携できる
　JavaScriptの文法を踏襲している
　できること：プログラムの自動化
	　　　Webサイトからの情報収集（スクレイピング）
	　　　Webアプリケーション開発
	　　　外部アプリケーションとの連携

・API(Application Programming Interface)
　→アプリケーション、ソフトウェアとプログラムを繋ぐもの
　アプリとアプリを繋げて機能性を拡張させて、より便利に使おう
　アプリケーション、ソフトウェアの一部を外部に向けて公開することで第三者が公開した機能を共有できる
　「APIを公開する」＝ソフトウェアと外部アプリケーションが連携できる窓口を作る
　長崎出島の例

　・WEB API
　　Web技術を使うAPI
　　HTTP/HTTPS方式を使っている…APIとクライアントの言語が違っても通信できる
　　例：家計簿アプリの口座残高確認、SMS認証

　・REST API(REST = REpresentational State Transfer)
　　下記RESTの4原則にのっとったAPI
　　RESTの4原則
　　①統一インターフェース　あらかじめ定義された方法でやり取りされる　HTTP/HTTPS
　　②アドレス可能性　すべての情報が一意なURI(識別子)を持っていて、提供する情報をURIで表現できる
　　　URI = Uniformed Resource Identifier 
　　　　　　Webの場合のURL
　　③接続性　やりとりされる情報にはハイパーリンクを含めることができる
　　　　　　　リンクからリンクに、円滑な情報連携
　　④ステートレス性　やり取りが一回ごとに完結する

　・SOAP(Simple Object Access Protocol)
　　通信手段を選ばない
　　→RESTより何でも屋なイメージ
　　通信内容の記述でXMLを使う　言語やプラットフォームに依存しない
　　XML：ファイルの書き方のルールの一つ

・Ajax(Asynchronous JavaScript ＋ XML)
　JavaScriptの非同期通信を使ってXML形式のデータをサーバーとやり取りすること
　非同期通信：同期通信で順序だてて行う処理を無視して通信する。
　　　　　　　様々な処理を並列に行える、シームレス
　例：検索エンジンの予測変換、地図アプリ（隣の地図だけを読み込み続ける）、SNS(TLのスクロール)
　
　・XML(eXtensible Markup Language)
　　マークアップ言語：タグで囲うことで構造を表現する
　　データのやりとり、設定ファイル作成などに使われる
　　タグを自由に定義できる　自由度が高い
　　ただ重い
　　

　・JSON(JavaScript Object Notation)
　　JavaScriptのオブジェクトの書き方を元にしたデータ定義方法
　　JavaScriptと相性が良いが、Python、Java、PHPなど様々な言語でも使われる
　　JavaScriptなどのクライアント言語とPythonなどのサーバサイド言語間のデータのやり取りで使われることが多い

　・ステータスコード
　　システムが処理結果や現在の状態を外部に知らせるために発する数字や短い符号
　　問題発生時のもの：エラーコード
　　例：HTTPステータスコードは3桁の整数　頭でなんとなく処理がどうなったかわかる

　・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
　　オリジン間リソース共有
　　あるオリジンで動いている Web アプリケーションに対して、別のオリジンのサーバーへのアクセスをオリジン間 HTTP リクエストによって許可できる仕組み
　　オリジン：データの送信元
　　　例：HTTP　URLのうち、URIスキーム（http://かhttps://かの違い）、ホスト名（Webサーバのドメイン名）、ポート番号（デフォルトではhttpがTCP80番、httpsがTCP443番）の組み合わせのこと

・バリデーション
　入力チェック、書式チェック（データ形式）、→妥当性の確認
　入力されたデータが、あるいはプログラミング言語やマークアップ言語の記述が、規定された文法に即して、または要求された仕様にそって、適切に記述されているかどうかを検証すること
　例：フォームへの入力が規則通りに記述されているかの判断　住所欄に電話番号書くとはじかれる

・データ連携
　データやシステムにつながりを持たせることで、データを資産と同じように活用するためのプロセスや仕組み
　効率的なデータ管理、運用が目的
　・Daemon（でーもん）
　　UNIX系OSの常駐ソフト
　　メモリ上で常に待機している　使用者が直接触ることはよっぽどない
　　名前の最後に「ｄ」がつく（という習慣がある）　httpdなど

　・CRON
　　UNIX系OSのソフト
　　crontabというコマンドを使って日時を指示すると、その時間に指定のプログラムを動かしてくれる
　　定期的に行いたい操作に有効
　　例：バックアップ、たまったファイルの消去
　　時間にハードの電源がついていないと動けない
　　→anacronは次に電源がつくとやってくれる

　・バッチ（Batch = 一束、一群）
　　どこかのタイミングでまとめて実施される処理↔リアルタイム処理
　　自動化できる
　　忙しくないときに実行できる
　　状況に左右されない定型的な作業に向いている

　・ログ
　　コンピューターでの記録
　　コンピュータの利用状況やデータ通信など履歴や情報の記録を取る事、またその記録
　　・いつ
　　・誰が
　　・何をやったのか（起こったのか）
　　・補足
　　を記録することが多い
　　アクセスログ：アクセスした人を記録
　　エラーログ：エラーが起こったことや内容を記録

　・CSV（Comma Separated Value）
　　意味：カンマで区切った値
　　CSVファイル：表形式のファイル　そのままだと使いにくいため、ExcelやAccessなどに取り込んで使う
　　必要最小限のシンプルなデータ構造
　　互換性が高い

　・TSV（Tab Separated Value）
　　意味：タブで区切った値
　　CSVのタブ版

・プルリクエスト（マージリクエスト）
　ローカルリポジトリで行った作業の反映を他の開発者に依頼することで、確認してもらってから反映（やり直し）ができる
　分散バージョン管理システム（VCS）の機能の一つで、コードなどを追加・修正した際、本体への反映を他の開発者に依頼する機能
　「変更を本人以外がレビューしてから反映させる」という手順を容易に実現することができる
　　GitはVCS

■ チケット管理ツール
・asana
　アプリ連携数が多い
　タスクの進捗を一覧で見られる（リスト、ボード）

・Backlog
　課題の登録の際、担当者、優先度などを登録する
　タスク詳細でコミュニケーションが取れる
　プロジェクトの進捗の把握がしやすい
　エンジニア向け　少し複雑

・Jooto
　かんばん方式の管理ツール
　タスクに紐づいたメッセージ　コミュニケーション取りやすい
　無料プランだと運用厳しい

・Redmine
　オープンソース　だれでも自由に使える
　導入に専門知識が必要
　エンジニア向け
　チケットは一覧で見られる　優先度や進捗も
　ガントチャート
　
・Trello
　かんばん形式のタスク管理
　直観的な操作性
　コミュニケーションがとりづらい

　■ バージョン管理
・集中型
　例：Subversion
　リモートリポジトリ上で直接作業する

・分散型
　例：Git
　ローカルリポジトリ上で作業し、好きなタイミングでリモートリポジトリに同期する
　
・Github(Gitの集まり)
　GUI
　Gitを使う
　プライベート（非公開）リポジトリが無料、無制限
　機能、拡張ツールが豊富

・Backlog
　GUI
　SVNやGitが使える
　タスク管理もできる
　
　
・SourceTree
　GUI
　Atlassian社製
　Gitの分散管理システムツール操作を効率的に扱うGUI
　無料
　Mac、Windows 対応
　日本語対応

・Tortoise SVN
　GUI
　集中型　SVN使用
　Windows向け
　→Windowsのシェルに統合されている　Windowsユーザーの慣れた操作感で使える

・Git Flow
　CUI
　Gitを使う
　主にブランチ捜査の自動化が目的

　　・master
　　　メインブランチ
　　　常にリリースできる状態
　　　
　　・release
　　　サポートブランチ
　　　リリースの準備用

　　・develop
　　　メインブランチ
　　　最新の開発作業の変更を常に反映する

　　　・feature
	サポートブランチ
	新機能の開発を行う

■FW／ライブラリ
・FW（FrameWork）
　アプリケーションを開発するのに必要な機能がデフォルトで揃っているもの
　一から開発しなくてよい　必要な機能を開発していく
　プログラミング言語によってつかえるものが違う（それはそう）
　複数のエンジニアがメンテナンスしているため、県労政、効率性が高い
　バグを減らせる
　あらかじめ構築済みのもので、テスト済みのものから開発するため、アプリケーションの信頼性が上がる

　・Spring Framework
　　オープンソース
　　Javaの開発環境で使用できる
　　AOP(Aspect Orientation Programming)
　　→アスペクト指向プログラミング　システム内の共通処理を抽出して集約するプログラミング手法
　　　コードがシンプルになってメンテナンスがしやすい
　　DI(Dependency Injection)
　　→依存性の注入　2つの依存関係のクラスがあり、片方が未完成だと、動作テストができない
　　　これを使ってオブジェクトを注入するとクラスの依存関係が解消されてテストできる
　　　プログラムを独立させやすい
　　開発に役立つテストプログラムがある

　・Struts
　　オープンソース
　　Javaの開発環境で使用できる
　　脆弱性があるもの「まだまだ現役」
　　→脆弱性を理解して運用すべき
　　MVC(Model View Controller)
　　→アプリケーションを設計する際の概念
　　　モデル、ビュー、コントローラーという形で分割・整理することで役割ごとにプログラミング
　　メンテナンスがしやすい
　　歴史のあるフレームワーク　知識が得やすい

　・JSF（Java Server Faces）
　　Javaのフレームワーク
　　Java EEに搭載
　　JSP(Java Server Pages)と混同されやすい
　　→Webページの中にJavaプログラムを記述する言語
　　　1ページ中にHTMLとJSPタグによる記載があり、未整理に感じる場合も
　　↳「もっときれいにデザインと処理を分けて作りたい」とできたのがフレームワーク
　　UI作成のために設計されている
　　これもMVC

・ライブラリ
　作業を簡略化するために使用できる予め書き込まれたプログラムの集まり
　繰り返して利用できるプログラムの集合体
　既にライブラリにあるコードを書く手間が省ける

　・Bootstrap
　　元々は米Twitter社が開発→オープンソースに
　　webサービスサイトの開発で、素早く作業するためのソフト
　　html・css・フォント・javascriptを使う

　・Flyway
　　オープンソース
　　データベースマイグレーションツール　データベースをバージョン管理できる
　　→データベースの状態を把握しやすくする
　　　新しいデータベース環境も作りやすい

　・Jackson
　　JSONライブラリ
　　Javaで使える
　　できること：JSON形式の文字列をJavaのオブジェクトに直接マッピング
　　　　　　　　逆にJavaオブジェクトをJSON文字列に変換
　　
　・jQuery
　　JavaScriptのライブラリ
　　シンプルにJavaScriptを記述できる
　　HTMLやCSSの操作に関するコードが多く含まれている　動的な表現を短いコードで実装できる

　・Junit
　　xUnit＝各言語の単体テストのテスティングフレームワークの総称
　　JunitはJavaのxUnit
　　Junitで作成したテストプログラムはいつでも再実行できる　繰り返し単体テストが簡単に行える

　・Log4j(Apache Log4j)
　　JavaベースのアプリケーションのAPI
　　処理スピード、多機能性によって多くのJavaアプリケーションで使用される
　　脆弱性：「JNDI Lookup」機能　Apache Log4j 2.15.0より以前のバージョン
　　　　　　この機能を使って悪意のあるプログラムを比較的簡単にリモート実行できてしまう可能性
　　　　　　めちゃくちゃ簡単に悪用できるし悪用の方法も多い　そしてめちゃくちゃ使われているシステム　やばい

　・Lombok
　　Javaのライブラリ
　　オープンソース
　　アノテーションをつける　Eclipseの自動生成よりシンプルで要点を捉えたコードが書ける
　　無限ループなどには注意
　　

　・ORM（Object-Relational Mapping　オブジェクト関係マッピング)
　　オブジェクトと関係（関係データベース、RDB）とのマッピングを行うもの
　　SQLを直接書くことなく、オブジェクトのメソッドでDB操作ができる
　　
■ 連絡ツール
・ChatWork
　中小企業向けビジネスチャットツール
　シンプルな操作感が売り
　社外メンバーとも使える
　セキュリティ水準が高い
　カスタマイズ可
　チャット　ビデオ／音声通話　タスク管理　ファイル管理　などができる

・Slack
　ビジネス向けチャットツール
　PC、スマホ、ブラウザ、アプリなど、使える環境が幅広い
　すべての作業をチャンネルに集約できる
　→通話、チャット、ファイル管理など
　途中参加でもメッセージの流れを見られる
　外部ツールとの連携が多い
　検索機能が充実している

・IP Messenger
　LAN 用メッセンジャーソフト
　同じネットワーク内の人とコミュニケーションが取れる　部署の人、同じプロジェクトの人など
　LAN内でやり取りするため、セキュリティ面で安心

■ Java
・Javadoc
　プログラムについて説明するドキュメントをソースコードに埋め込むためのもの　開発者への説明
　ソースコードとその説明を同じ場所で管理できる
　メタデータ：本体であるデータに関する付帯情報が記載されたデータです
　Javadocはソースコード、プログラムについてのメタデータ

・アノテーション(注釈）
　コンパイラや実行環境に対してプログラムがどういうものかを伝えたいときに使う
　コンパイラからの警告メッセージの抑制、実行環境によってプログラムの動作を変更することなどができる
　大規模開発で、コーディングスタイルのルールを徹底するときに使える

・メモリ管理
　データを格納するために必要な「メモリ領域」を割り当てたり、不要になったデータが占拠しているメモリ領域を解放したりすること
　ここでいう「メモリ」：メインメモリ　CPUがプログラムを実行するときに使う記憶装置のこと
　効率的にメモリを使わないとすぐ容量がいっぱいになる
　例：プログラミングでは変数を使用する場合にメモリを確保し、変数を使い終わったらメモリを解放する

　・ヒープ
　　①データ構造の一種
　　　ツリー構造のうち、親要素が常に子要素より大きい（もしくは小さい）という条件を満たすもの
　　②コンピュータプログラムが利用するメモリ領域の種類の一つ
　　　実行時に任意のタイミングで確保や解放が可能なもの
　　　ヒープ領域を略してヒープと呼ばれることがある

　・GC(Garbage Collection)
　　コンピュータプログラムの実行環境などが備える機能の一つ
　　実行中のプログラムが占有していたメモリ領域のうち不要になったものを自動的に解放し、空き領域として再利用できるようにするもの
　　要らないものを勝手に解放してくれるため、効率的にメモリ管理ができる
　　それを実行するプログラム：ガベージコレクタ（Garbage Collector）

・GoF(Gang of Four)
　4人のプログラマー
　使いやすくて便利なデザインパターンをまとめた
　全23パターン

・デザインパターン
　JavaやRubyなど、オブジェクト指向の色々なプログラムで再利用できる設計パターン
　GoFがまとめたものは全23パターン
　デザインパターンの目的
　・ベストプラクティスを体得する　先人の知恵を借りられる
　・再利用性の高いコードを書く　メンテナンス性の向上、見通しの良さ
　・エンジニア同士の共通言語にする　デザインパターンを知っていさえすれば読みやすいコード　そして多くの人がデザインパターンを学んでいる

■ その他
・オブジェクト指向
　プログラムを「モノの作成と操作」とする考え方
　Java,Ruby,Pythonはオブジェクト指向型言語
　利点
　　全体構造を把握しやすい
　　分業がしやすい
　　同じようなものを作りやすい　既にあるものを活用できる
　　修正や改良がやりやすい
　欠点
　　概念の理解が難しい
　　コードが複雑になる　ゼロからの開発は難しい

・バッチ処理(Batch)（一束、一群、一団…）
　一定量のデータを集めて、一括処理するための方法
　≒一括処理
　↔リアルタイム処理
　
・コンパイル
　ソースコードをコンピューターが読み込めるように翻訳すること
　コンパイルするためのソフト：コンパイラ
　成果物：バイナリコード

・カバレッジ(Coverage)（網羅率）
　カバーしている範囲
　出来上がったプログラムのテストをする際に、どの程度をテスト対象とするか→テストカバレッジ

・プラットホーム＝プラットフォーム（platform）
　プログラムなどを動かすための土台の環境
　主体によって指し示すものは変わる